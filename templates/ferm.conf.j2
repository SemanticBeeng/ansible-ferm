#
# Ansible managed
# ansible-ferm/templates/ferm.conf.j2
#
# iptables firewall managed by ferm

# You can put custom ferm configuration files in directories:
#
# - /etc/ferm/filter-input.d/
#       for table filter, chain INPUT; it will be automatically included in the
#       chain, so you don't need to add these ferm subsections
#
# - /etc/ferm/ferm.d/
#       for all other tables and chains; you need to add full ferm
#       configuration here, this directory is included at the end of the file.
#       ferm will correctly merge your own configuration with the rest.
#
# Resources
# 1. https://www.linode.com/docs/networking/vpn/tunnel-your-internet-traffic-through-an-openvpn-server/


# Global firewall variables
@def $domains   = ({{ ferm_filter_domains | unique | join(" ") }});
@def $ipv4_enabled  = {% if 'ip'  in ferm_filter_domains %}1{% else %}0{% endif %};
@def $ipv6_enabled  = {% if 'ip6' in ferm_filter_domains %}1{% else %}0{% endif %};

@def $ipv4_address  = {{ ansible_default_ipv4.address }};
@def $intf_main     = {{ intf_main }};

{#{% if ferm_docker %}#}
{#domain $domains table nat {#}
{#  chain DOCKER;#}
{#  chain PREROUTING {#}
{#    mod addrtype dst-type LOCAL jump DOCKER;#}
{#  }#}
{#  chain OUTPUT {#}
{#    daddr !127.0.0.0/8 mod addrtype dst-type LOCAL jump DOCKER;#}
{#  }#}
{#  chain POSTROUTING {#}
{#    saddr 172.17.0.0/16 outerface !docker0 MASQUERADE;#}
{#  }#}
{#}#}
{#{% endif %}#}

domain $domains table filter {
{#{% if ferm_docker %}#}
{#  chain DOCKER;#}
{#{% endif %}#}
  # Default chain policy
  chain INPUT    policy {{ ferm_default_policy_input   | default('DROP') }};
  chain OUTPUT   policy {{ ferm_default_policy_output  | default('ACCEPT') }};
  chain FORWARD  policy {{ ferm_default_policy_forward | default('DROP') }};

  chain INPUT {

    # @include 'filter-input.d/000_lo.conf';

{% if ferm_icmp_limit is defined and ferm_icmp_limit %}
    # Limit incoming ICMP traffic per source
    protocol icmp @subchain "ICMP-flood" {
      mod hashlimit hashlimit {{ ferm_icmp_limit }}
          hashlimit-burst {{ ferm_icmp_burst }}
          hashlimit-mode srcip
          hashlimit-name ICMP-flood
          hashlimit-htable-expire 3600000
      ACCEPT;
{% if ferm_log_issues is defined and ferm_log_issues %}
      mod limit limit 3/hour limit-burst 2 {
        LOG log-prefix "iptables-ICMP-flood: ";
      }
{% endif %}
      REJECT reject-with icmp-admin-prohibited;
    }
{% else %}
    # Accept incoming ICMP traffic
    protocol icmp ACCEPT;
{% endif %}
  }

{#{% if ferm_docker %}#}
{#  chain FORWARD {#}
{#    outerface docker0 mod conntrack ctstate (RELATED ESTABLISHED) ACCEPT;#}
{#    interface docker0 outerface !docker0 ACCEPT;#}
{#    interface docker0 outerface docker0 ACCEPT;#}
{#  }#}
{#{% endif %}#}

  chain (INPUT OUTPUT FORWARD) {

    # Connection tracking
    mod conntrack ctstate INVALID DROP;
    mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;
  }

  @include 'incl.d/bw_list.conf';

{% if ferm_syn_limit is defined and ferm_syn_limit %}
  chain INPUT {
    # SYN-flood protection per source
    protocol tcp syn @subchain "SYN-flood" {
      mod hashlimit hashlimit {{ ferm_syn_limit }}
          hashlimit-burst {{ ferm_syn_burst }}
          hashlimit-mode srcip
          hashlimit-name SYN-flood
          hashlimit-htable-expire 3600000
      RETURN;
{%   if ferm_log_issues is defined and ferm_log_issues %}
      mod limit limit 3/hour limit-burst 5 {
        LOG log-prefix "iptables-SYN-flood: ";
      }
{%   endif %}
      REJECT reject-with icmp-admin-prohibited;
    }

{% endif %}
{% if ferm_filter_recent|d() and ferm_filter_recent %}
    # Drop connections from bad guys
    mod recent name "{{ ferm_block_recent }}" update seconds {{ ferm_block_time }} {
{%   if ferm_log_issues is defined and ferm_log_issues %}
      mod limit limit 3/hour limit-burst 5 {
        LOG log-prefix "iptables-recent-{{ ferm_block_recent }}: " log-level warning;
      }
{%   endif %}
      REJECT reject-with icmp-admin-prohibited;
    }

{% endif %}
    # Include INPUT rules for enabled domains (IPv4, IPv6)
    @include 'filter-input.d/';

{% if ferm_filter_recent|d() and ferm_filter_recent | bool %}
{% if ferm_mark_portscan is defined and ferm_mark_portscan %}
    # Catch bad guys (port scanners)
    mod recent set name "{{ ferm_block_recent }}" {
{% if ferm_log_issues is defined and ferm_log_issues %}
      mod limit limit 3/hour limit-burst 5 {
        LOG log-prefix "iptables-portscan: " log-level warning;
      }
{% endif %}
    }

{% endif %}
{% endif %}
    # Reject everything else
    protocol udp REJECT reject-with icmp-port-unreachable;
    protocol tcp REJECT reject-with tcp-reset;
    @if @eq($DOMAIN, ip) {
      REJECT reject-with icmp-proto-unreachable;
    }
  }
}

# Include other configuration files
@include 'ferm.d/';

{% if ferm_fail2ban is defined and ferm_fail2ban %}
# Reload fail2ban rules if fail2ban-server is active
@hook post "type fail2ban-server > /dev/null && (fail2ban-client ping > /dev/null && fail2ban-client reload > /dev/null || true) || true";

{% endif %}
